; Generated by Advanced Assembly Transpiler v2.0.0
; Target: linux (x86_64)
; Optimization: Level 1

bits 64

extern printf
extern puts

section .rodata
    msg_hello db "Hello from CASM!", 0
    msg_loop db "Loop iteration", 0
    msg_done db "Done", 0
    _fmt_4809 db "Iteration %d\\n", 0
    _fmt_617 db "Inner hit at a=%d i=%d\\n", 0

section .text

; Comprehensive control flow examples for CASM
; Demonstrates UIF/UELSE/UENDIF, ULOOP (numeric, labeled, while-style, C-style for),
; UPRINT/UPRINTF, canonical registers (rax/rcx/rsi), and nested loops.

; --- Data ---

; --- Simple UIF (if) ---
var int flag 1
    mov rcx, [rel flag]
    cmp rcx, 1
    jne .IF_0_ELSE
    lea rdi, [rel msg_hello]
    xor eax, eax
    call puts
    jmp .IF_0_END
    lea rdi, [rel msg_done]
    xor eax, eax
    call puts
.IF_0_END:

; --- Numeric counted loop ---
    sub rsp, 16
    mov [rsp], rcx
    mov rcx, 3
loop_0:
    ; Loop with trip count: 3
    lea rdi, [rel msg_loop]
    xor eax, eax
    call puts
    dec rcx
    jnz loop_0
    mov rcx, [rsp]
    add rsp, 16
loop_0_end:

; --- Labeled loop with explicit count ---
    mov rcx, 2
outer:
    ; Loop with trip count: 2
    lea rdi, [rel msg_loop]
    xor eax, eax
    call puts
    ; inner numeric loop
    sub rsp, 16
    mov [rsp], rcx
    mov rcx, 2
loop_1:
    ; Loop with trip count: 2
    lea rdi, [rel msg_loop]
    xor eax, eax
    call puts
    dec rcx
    jnz loop_1
    mov rcx, [rsp]
    add rsp, 16
loop_1_end:
    dec rcx
    jnz outer
    mov rcx, [rsp]
    add rsp, 16
outer_end:

; --- While-style loop ---
var int w 0
loop_2:
    mov rcx, [rel w]
    cmp rcx, 3
    jge .IF_1_ELSE
    lea rdi, [rel msg_loop]
    xor eax, eax
    call puts
    ; increment
    w = w + 1
    mov rcx, [rel w]
    cmp rcx, 3
    jge loop_2_end
    jmp loop_2

; --- C-style for loop ---
var int i 0
    mov i, 0
loop_3:
    mov rcx, [rel i]
    cmp rcx, 4
    jge loop_3_end
    ; use canonical registers in generated instructions
    mov rax, i
    mov rcx, rax
    lea rdi, [rel _fmt_4809]
    mov rsi, i
    xor eax, eax
    call printf
    inc i
    mov rcx, [rel i]
    cmp rcx, 4
    jge loop_3_end
    jmp loop_3

; --- Nested loops & condition inside ---
var int a 0
    mov a, 0
loop_4:
    mov rcx, [rel a]
    cmp rcx, 2
    jge loop_4_end
    mov i, 0
loop_5:
    mov rcx, [rel i]
    cmp rcx, 3
    jge loop_5_end
    mov rcx, [rel i]
    cmp rcx, 1
    jne .IF_2_ELSE
    lea rdi, [rel _fmt_617]
    mov rsi, a
    mov rdx, i
    xor eax, eax
    call printf
.IF_2_END:
    inc i
    mov rcx, [rel i]
    cmp rcx, 3
    jge loop_5_end
    jmp loop_5
    add a, a, 1
    mov rcx, [rel a]
    cmp rcx, 2
    jge loop_4_end
    jmp loop_4

; End
    lea rdi, [rel msg_done]
    xor eax, eax
    call puts