%extern stdio.h
%extern stdlib.h
%extern string.h
%extern math.h

%var input_value 15
%var factorial_result 1
%var power_result 0
%var string_length 0
%var magic_number 42

%println "=== Multi-Language Integration Demo ==="
%println "Testing CASM + C + Assembly + External Headers"
%println ""

%println "1. CASM Computing factorial of 15:"
%var counter 1
%while counter <= input_value
    %var factorial_result factorial_result*counter
    %var counter counter+1
%endwhile
%println "CASM factorial result:"
%println factorial_result

%println ""

%println "2. C code using external math and string libraries:"
%! double base = 2.0; double exponent = (double)var_input_value; double power_calc = pow(base, exponent); var_power_result = (int)power_calc;
%! printf("C computed 2^%d = %d (using math.h pow function)\n", var_input_value, var_power_result);
%! char demo_string[] = "Hello from C code!"; int len = strlen(demo_string); var_string_length = len;
%! printf("C measured string length: '%s' = %d chars (using string.h)\n", demo_string, len);
%! srand(var_magic_number); int random_num = rand() % 100;
%! printf("C generated random number (stdlib.h): %d\n", random_num);

%println ""

%println "3. CASM processing C results:"
%if power_result > 30000
    %println "Power result is very large!"
%else
    %println "Power result is manageable"
%endif

%println "String length from C:"
%println string_length

%println ""

%println "4. Direct assembly for bit manipulation:"
mov eax, dword [rel var_magic_number]
mov ebx, eax
shl eax, 2
not ebx
mov dword [rel var_power_result], eax
mov dword [rel var_string_length], ebx

%! printf("Direct assembly bit operations on %d:\n", var_magic_number);
%! printf("  Shifted left by 2: %d\n", var_power_result);
%! printf("  Bitwise inverted: %d\n", var_string_length);

%var power_result 0
%var string_length 0

%println ""

%println "5. Direct assembly memory operations:"
xor eax, eax
mov ebx, dword [rel var_input_value]
add eax, ebx
imul eax, 2
mov dword [rel var_power_result], eax

%! printf("Assembly arithmetic: %d * 2 = %d\n", var_input_value, var_power_result);

mov eax, dword [rel var_factorial_result]
cmp eax, 1000
jl factorial_small
%! printf("Assembly detected: factorial >= 1000\n");
jmp factorial_done
factorial_small:
%! printf("Assembly detected: factorial < 1000\n");
factorial_done:

%println ""

%println "6. CASM control flow with assembly integration:"
%for i in range(3)
    %println "CASM loop iteration:"
    %println i
    %! printf("  C code in CASM loop\n");
%endfor

%println ""

%println "=== SUMMARY ==="
%println "Original input:"
%println input_value
%println "CASM factorial:"
%println factorial_result
%println "C power calculation:"
%println power_result
%println "C string measurement:"
%println string_length

%println ""
%println "7. Final C analysis using all libraries:"
%! printf("=== FINAL ANALYSIS ===\n");
%! printf("Technologies demonstrated:\n");
%! printf("  - CASM high-level constructs (variables, loops, conditions)\n");
%! printf("  - C standard library functions:\n");
%! printf("    * stdio.h: printf for formatted output\n");
%! printf("    * math.h: pow() for power calculation\n");
%! printf("    * string.h: strlen() for string measurement\n");
%! printf("    * stdlib.h: rand()/srand() for random numbers\n");
%! printf("  - Inline assembly for bit manipulation\n");
%! printf("  - Variable sharing between CASM and C\n");
%! printf("\n");
%! printf("All values computed successfully!\n");
%! printf("CASM factorial(%d) = %d\n", var_input_value, var_factorial_result);
%! printf("C power(2, %d) = %d\n", var_input_value, var_power_result);
%! printf("Integration test: PASSED\n");

%println ""
%println "=== DEMO COMPLETE ==="
